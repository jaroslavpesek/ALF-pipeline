- name: Remove application and configuration to create clean environment
  become: yes
  shell: |
    rm -rf /{{ app_name }} && rm -rf /etc/{{ app_name }} && rm -rf /var/run/{{ app_name }}
    SERVICE_NAME="{{ app_name }}"
    if systemctl --all --type=service | grep -q "$SERVICE_NAME"; then
        systemctl stop "$SERVICE_NAME"
        systemctl disable "$SERVICE_NAME"
        rm "/etc/systemd/system/${SERVICE_NAME}.service"
        systemctl daemon-reload
        systemctl reset-failed
    fi

- name: Add group 
  group:
    name: "{{ app_name }}"
    state: present

- name: Add user
  user:
    name: "{{ app_name }}"
    group: "{{ app_name }}"
    state: present
    shell: /bin/bash
    createhome: yes

- name: Start and enable redis service
  service:
    name: redis
    state: started
    enabled: yes

- name: Copy rabbitmq-env.conf file
  copy:
    src: "{{ root_path }}/config/dp3/rabbitmq-env.conf"
    dest: /etc/rabbitmq/rabbitmq-env.conf
    owner: root
    group: root
    mode: 0644

- name: Start and enable rabbitmq-server service
  service:
    name: rabbitmq-server
    state: started
    enabled: yes

- name: Enable web management interface
  command: rabbitmq-plugins enable rabbitmq_management

- name: Download rabbitmqadmin
  get_url:
    url: "http://localhost:15672/cli/rabbitmqadmin"
    dest: "/tmp/rabbitmqadmin"
    mode: '0755'

- name: Move rabbitmqadmin to /usr/bin
  command: mv /tmp/rabbitmqadmin /usr/bin/
  args:
    creates: /usr/bin/rabbitmqadmin

- name: Download rmq_reconfigure.sh script
  get_url:
    url: "https://raw.githubusercontent.com/CESNET/dp3/new_dp3/scripts/rmq_reconfigure.sh"
    dest: "/tmp/rmq_reconfigure.sh"
    mode: '0700'

- name: Run rmq_reconfigure.sh script
  command: sh /tmp/rmq_reconfigure.sh {{ app_name }} 2

- name: Run dp3 configuration for nginx
  become: yes
  shell: |
    source /dp3-venv/bin/activate && $(which dp3) config nginx --hostname {{ server_name }} --app-name {{ app_name }} --www-root {{ www_root }}
  vars:
    www_root: /var/www/dp3

- name: Start and enable nginx service
  service:
    name: nginx
    state: started
    enabled: yes

- name: Ensure firewalld is not masked
  command: systemctl unmask firewalld

- name: Ensure firewalld is enabled
  systemd:
    name: firewalld
    enabled: yes

- name: Ensure firewalld is running
  systemd:
    name: firewalld
    state: started

- name: Open port 80/tcp
  firewalld:
    port: 80/tcp
    permanent: true
    state: enabled

- name: Reload firewalld
  command: firewall-cmd --reload

- name: Create DP3 application
  shell: |
    source /dp3-venv/bin/activate && $(which dp3) setup /{{ app_name }} {{ app_name }}

- name: Change ownership of DP3 app folder to application user
  become: yes
  file:
    path: /{{ app_name }}
    owner: "{{ app_name }}"
    group: "{{ app_name }}"
    recurse: yes

- name: Create folder in /var/run for application
  file:
    path: /var/run/{{ app_name }}
    state: directory
    owner: "{{ app_name }}"
    group: "{{ app_name }}"
    mode: 0755

- name: Copy MongoDB setup file
  copy:
    src: "{{ root_path }}/config/dp3/database.yml"
    dest: /{{ app_name }}/config/database.yml
    owner: "{{ app_name }}"
    group: "{{ app_name }}"
    mode: 0644

- name: Copy history manager config file
  copy:
    src: "{{ root_path }}/config/dp3/history_manager.yml"
    dest: /{{ app_name }}/config/history_manager.yml
    owner: "{{ app_name }}"
    group: "{{ app_name }}"
    mode: 0644

- name: Copy processing config
  copy:
    src: "{{ root_path }}/config/dp3/processing_core.yml"
    dest: /{{ app_name }}/config/processing_core.yml
    owner: "{{ app_name }}"
    group: "{{ app_name }}"
    mode: 0644

- name: Remove example db_entities folder
  become: yes
  file:
    path: /{{ app_name }}/config/db_entities
    state: absent

- name: Remove example module
  become: yes
  file:
    path: /{{ app_name }}/modules/test_module.py
    state: absent

- name: Copy db_entities folder
  copy:
    src: "{{ root_path }}/config/dp3/db_entities"
    dest: /{{ app_name }}/config
    owner: "{{ app_name }}"
    group: "{{ app_name }}"
    mode: 0644

- name: Copy dp3_modules folder
  copy:
    src: "{{ root_path }}/dp3_modules"
    dest: /{{ app_name }}
    owner: "{{ app_name }}"
    group: "{{ app_name }}"
    mode: 0644

- name: Create folder for datapoints history
  file:
    path: /data/datapoints
    state: directory
    owner: "{{ app_name }}"
    group: "{{ app_name }}"
    mode: 0755

- name: Setup supervisor control of all DP3 processes
  shell: |
    source /dp3-venv/bin/activate && sudo $(which dp3) config supervisor --config /{{ app_name }}/config --app-name {{ app_name }}

- name: Reload units
  become: yes
  shell: |
    systemctl daemon-reload

- name: Start and enable application
  systemd:
    name: "{{ app_name }}"
    state: started
    enabled: yes






